security:
    encoders:
        Yoda\UserBundle\Entity\User: bcrypt
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    providers:
      my_database_users:
        entity: { class: UserBundle:User, property: username }



    # http://symfony.com/doc/current/book/security.html#firewalls-authentication
    firewalls:
        secured_area:
            # this firewall applies to all URLs
            pattern: ^/

            # but the firewall does not require login on every page
            # denying access is done in access_control or in your controllers
            anonymous: true

            # This allows the user to login by submitting a username and password
            # Reference: http://symfony.com/doc/current/cookbook/security/form_login_setup.html
            form_login:
                # The route name that the login form submits to
                check_path: login_check
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: login_form
                # Secure the login form against CSRF
                # Reference: http://symfony.com/doc/current/cookbook/security/csrf_in_login_form.html
                # csrf_token_generator: security.csrf.token_manager

            logout:
                # The route name the user can go to in order to logout
                path: logout # a route name
                # The name of the route to redirect to after logging out
                target: event # a route for our homepage

    access_control:

# putting security in the controller class instead!
#        - { path: ^/new, roles: ROLE_USER }
#        - { path: ^/create, roles: ROLE_USER }
